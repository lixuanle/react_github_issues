{"version":3,"sources":["Loader.js","IssueComponent.js","Issues.js","serviceWorker.js","index.js"],"names":["Loader","react_default","a","createElement","className","React","Component","IssueComponent","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","open","close","labels","map","x","colorCode","color","key","id","style","backgroundColor","fontWeight","fontSize","padding","marginRight","name","toLowerCase","flag","href","url","target","rel","title","snippet","number","date","author","html_url","login","src","avatar_url","alt","cUrl","comments","require","config","path","fetch","CLIENT_ID","process","CLIENT_SECRET","Issues","_this","getIssues","searchTerm","state","inputV","languageSearch","language","pageNum","page","console","log","concat","then","res","json","setState","total","total_count","searches","items","loading","total_pages","Math","floor","handleChange","e","value","handleSubmit","preventDefault","handleDrop","fixDate","slice","_this2","issues_list","created_at","src_IssueComponent","node_id","comments_url","body","user","onSubmit","type","onChange","placeholder","default","hidden","src_Loader","Boolean","window","location","hostname","match","ReactDOM","render","src_Issues","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAUeA,0LANX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAHAC,IAAMC,YC0BZC,cAzBb,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,0EAIN,IAAMO,EAAOd,EAAAC,EAAAC,cAAA,KAAGC,UAAU,+CACpBY,EAAQf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6CACrBa,EAASN,KAAKH,MAAMS,OAAOC,IAAI,SAACC,GACpC,IAAIC,EAAY,IAAMD,EAAEE,MACxB,OAAQpB,EAAAC,EAAAC,cAAA,QAAMmB,IAAKH,EAAEI,GAAIC,MAAO,CAACH,MAAO,QAASI,gBAAiBL,EAAWM,WAAY,OAAQC,SAAU,GAAIC,QAAS,EAAGC,YAAa,IAAKV,EAAEW,KAAKC,iBAEtJ,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACQ,SAApBO,KAAKH,MAAMwB,KAAkBjB,EAAOC,EACrCf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,KAAG8B,KAAMtB,KAAKH,MAAM0B,IAAKC,OAAO,SAAS/B,UAAU,QAAQgC,IAAI,uBAAuBzB,KAAKH,MAAM6B,OAChGpB,GAEHhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BAA6BO,KAAKH,MAAM8B,SACrDrC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,IAA4BO,KAAKH,MAAM+B,OAAvC,cAA0D5B,KAAKH,MAAMgC,KAArE,OAA8EvC,EAAAC,EAAAC,cAAA,KAAG8B,KAAMtB,KAAKH,MAAMiC,OAAOC,SAAUtC,UAAU,cAAc+B,OAAO,SAASC,IAAI,uBAAuBzB,KAAKH,MAAMiC,OAAOE,OAAxM,IAAmN1C,EAAAC,EAAAC,cAAA,OAAKyC,IAAKjC,KAAKH,MAAMiC,OAAOI,WAAYzC,UAAU,aAAa0C,IAAI,eAAtR,IAAqS7C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAe6B,KAAMtB,KAAKH,MAAMuC,KAAMZ,OAAO,SAASC,IAAI,uBAAsBnC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAA1G,IAAkIO,KAAKH,MAAMwC,SAA7I,sBApBhR3C,IAAMC,WCEnC2C,EAAQ,IAAUC,OAAO,CAACC,KAAM,SAChC,IAAMC,EAAQH,EAAQ,IAChBI,EAAYC,8CAAYD,UACxBE,EAAgBD,8CAAYC,cAuGnBC,cApGb,SAAAA,EAAYhD,GAAO,IAAAiD,EAAA,OAAAhD,OAAAC,EAAA,EAAAD,CAAAE,KAAA6C,IACjBC,EAAAhD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+C,GAAA1C,KAAAH,KAAMH,KAkBRkD,UAAY,WACV,IAAIC,EAAaF,EAAKG,MAAMC,OACxBC,EAAiBL,EAAKG,MAAMG,SAC5BC,EAAUP,EAAKG,MAAMK,KACzBC,QAAQC,IAAIH,GACZZ,EAAK,0CAAAgB,OAA2CT,EAA3C,eAAAS,OAAmEN,EAAnE,cAAAM,OAA8Ff,EAA9F,mBAAAe,OAAyHb,EAAzH,UAAAa,OAA+IJ,EAA/I,iBACFK,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAAI,OAAId,EAAKe,SAAS,CAC1BC,MAAOF,EAAKG,YACZC,SAAUJ,EAAKK,MACfC,QAAS,EACTC,YAAaC,KAAKC,MAAMT,EAAKG,YAAY,SA9B5BjB,EAmCnBwB,aAAe,SAACC,GACdzB,EAAKe,SAAS,CACZX,OAAQqB,EAAE/C,OAAOgD,SArCF1B,EA0CnB2B,aAAe,SAACF,GACdzB,EAAKe,SAAS,CACZK,QAAS,EACTZ,KAAM,GACL,kBAAMR,EAAKC,cACdwB,EAAEG,kBA/Ce5B,EAmDnB6B,WAAa,SAACJ,GACZzB,EAAKe,SAAS,CACZT,SAAU,aAAemB,EAAE/C,OAAOgD,MAAxB,IACVN,QAAS,GACR,kBAAMpB,EAAKC,eAvDGD,EA2DnB8B,QAAU,SAAC/C,GACT,OAAOA,EAAKgD,MAAM,EAAE,KA1DpB/B,EAAKG,MAAQ,CACXC,OAAQ,GACRY,MAAO,EACPE,SAAU,CAAC,IACXZ,SAAU,IACVc,QAAS,EACTC,YAAa,EACbb,KAAM,GATSR,oFAejB9C,KAAK+C,6CAgDE,IAAA+B,EAAA9E,KACD+E,EAAc/E,KAAKiD,MAAMe,SAASzD,IAAI,SAACC,GAC3C,GAAIA,EAAEkB,MAAO,CACX,IAAIG,EAAOiD,EAAKF,QAAQpE,EAAEwE,YAC1B,OAAQ1F,EAAAC,EAAAC,cAACyF,EAAD,CAAgBtE,IAAKH,EAAE0E,QAAStD,OAAQpB,EAAEoB,OAAQS,SAAU7B,EAAE6B,SAAUD,KAAM5B,EAAE2E,aAAczD,MAAOlB,EAAEkB,MAAOC,QAASnB,EAAE4E,KAAMvD,KAAMA,EAAMC,OAAQtB,EAAE6E,KAAM9D,IAAKf,EAAEuB,SAAUV,KAAMb,EAAEyC,MAAO3C,OAAQE,EAAEF,YAGjN,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIoB,GAAG,iBAAP,iBACAtB,EAAAC,EAAAC,cAAA,OAAKoB,GAAG,eACNtB,EAAAC,EAAAC,cAAA,MAAIoB,GAAG,kBAAP,mEACAtB,EAAAC,EAAAC,cAAA,QAAMoB,GAAG,aAAa0E,SAAUtF,KAAKyE,cACnCnF,EAAAC,EAAAC,cAAA,SAAO+F,KAAK,OAAOC,SAAUxF,KAAKsE,aAAcmB,YAAY,kDAE9DnG,EAAAC,EAAAC,cAAA,OAAKoB,GAAG,cACNtB,EAAAC,EAAAC,cAAA,SAAIQ,KAAKiD,MAAMa,MAAf,WACAxE,EAAAC,EAAAC,cAAA,UAAQ2B,KAAK,WAAWP,GAAG,oBAAoB4E,SAAUxF,KAAK2E,YAC5DrF,EAAAC,EAAAC,cAAA,UAAQgF,MAAM,UAAUkB,SAAO,EAACC,QAAM,GAAtC,YACArG,EAAAC,EAAAC,cAAA,UAAQgF,MAAM,cAAd,cACAlF,EAAAC,EAAAC,cAAA,UAAQgF,MAAM,UAAd,UACAlF,EAAAC,EAAAC,cAAA,UAAQgF,MAAM,QAAd,QACAlF,EAAAC,EAAAC,cAAA,UAAQgF,MAAM,QAAd,QACAlF,EAAAC,EAAAC,cAAA,UAAQgF,MAAM,OAAd,OACAlF,EAAAC,EAAAC,cAAA,UAAQgF,MAAM,QAAd,QACAlF,EAAAC,EAAAC,cAAA,UAAQgF,MAAM,UAAd,MACAlF,EAAAC,EAAAC,cAAA,UAAQgF,MAAM,OAAd,OACAlF,EAAAC,EAAAC,cAAA,UAAQgF,MAAM,OAAd,SAGoB,IAAvBxE,KAAKiD,MAAMiB,QAAgB5E,EAAAC,EAAAC,cAACoG,EAAD,MAAYb,WA9F7BrF,IAAMC,WCGPkG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7G,EAAAC,EAAAC,cAAC4G,EAAD,MAAYC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.9342f5b4.chunk.js","sourcesContent":["import React from 'react';\n\nclass Loader extends React.Component {\n  render() {\n    return (\n      <div className=\"loader\"></div>\n    )\n  }\n}\n\nexport default Loader;\n","import React from 'react';\n\nclass IssueComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const open = <i className=\"fas fa-exclamation-circle issue-logo-green\"></i>;\n    const close = <i className=\"fas fa-exclamation-circle issue-logo-red\"></i>;\n    const labels = this.props.labels.map((x) => {\n      let colorCode = '#' + x.color;\n      return (<span key={x.id} style={{color: \"white\", backgroundColor: colorCode, fontWeight: \"bold\", fontSize: 11, padding: 2, marginRight: 2}}>{x.name.toLowerCase()}</span>)\n    })\n    return (\n      <div className=\"issue-container\">\n        {this.props.flag === 'open' ? open : close}\n        <div className=\"title-container issue-text\">\n          <a href={this.props.url} target=\"_blank\" className=\"title\" rel=\"noopener noreferrer\">{this.props.title}</a>\n          {labels}\n        </div>\n        <p className=\"issue-text issues-snippet\">{this.props.snippet}</p>\n        <p className=\"issue-text\">#{this.props.number} opened on {this.props.date} by <a href={this.props.author.html_url} className=\"author-link\" target=\"_blank\" rel=\"noopener noreferrer\">{this.props.author.login}</a> <img src={this.props.author.avatar_url} className=\"avatar-pic\" alt=\"avatar-pic\"/> <a className=\"comments-link\"href={this.props.cUrl} target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"far fa-comments\"></i> {this.props.comments} comments</a></p>\n      </div>\n    )\n  }\n}\n\nexport default IssueComponent;\n","import React from 'react';\nimport './issues.css';\nimport Loader from './Loader';\nimport IssueComponent from './IssueComponent';\nrequire('dotenv').config({path: '.env'});\nconst fetch = require('node-fetch');\nconst CLIENT_ID = process.env.CLIENT_ID;\nconst CLIENT_SECRET = process.env.CLIENT_SECRET;\n\nclass Issues extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputV: '',\n      total: 0,\n      searches: [{}],\n      language: '&',\n      loading: 0,\n      total_pages: 0,\n      page: 1\n    };\n  };\n\n  //Fires off the initial search to populate the page with the most recent issues.\n  componentWillMount() {\n    this.getIssues();\n  };\n\n  //Makes a GET request to the github issues api and updates states accordingly.\n  getIssues = () => {\n    let searchTerm = this.state.inputV;\n    let languageSearch = this.state.language;\n    let pageNum = this.state.page;\n    console.log(pageNum);\n    fetch(`https://api.github.com/search/issues?q=${searchTerm}+state:open${languageSearch}client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&page=${pageNum}&per_page=30`)\n      .then(res => res.json())\n      .then(json => this.setState({\n        total: json.total_count,\n        searches: json.items,\n        loading: 0,\n        total_pages: Math.floor(json.total_count/30)\n      }));\n  };\n\n  //Changes the inputV state to what the user inputs.\n  handleChange = (e) => {\n    this.setState({\n      inputV: e.target.value\n    })\n  };\n\n  //Function to trigger the search.\n  handleSubmit = (e) => {\n    this.setState({\n      loading: 1,\n      page: 1\n    }, () => this.getIssues())\n    e.preventDefault();\n  };\n\n  //Function to trigger the re-render when a new language is selected in the drop down menu.\n  handleDrop = (e) => {\n    this.setState({\n      language: '+language:' + e.target.value + `&`,\n      loading: 1\n    }, () => this.getIssues());\n  };\n\n  //Clean up the date string from json request.\n  fixDate = (date) => {\n    return(date.slice(0,10))\n  };\n\n  render() {\n    const issues_list = this.state.searches.map((x) => {\n      if (x.title) {\n        let date = this.fixDate(x.created_at);\n        return (<IssueComponent key={x.node_id} number={x.number} comments={x.comments} cUrl={x.comments_url} title={x.title} snippet={x.body} date={date} author={x.user} url={x.html_url} flag={x.state} labels={x.labels}/>)\n      };\n    });\n    return (\n      <div>\n        <h1 id=\"issues-header\">GitHub Issues</h1>\n        <div id=\"issues-page\">\n          <h2 id=\"issues-caption\">Look up over millions of issues and pull requests across GitHub</h2>\n          <form id=\"search-bar\" onSubmit={this.handleSubmit}>\n            <input type=\"text\" onChange={this.handleChange} placeholder=\"Search for issues across millions of repos..\"/>\n          </form>\n          <div id=\"issues-top\">\n            <p>{this.state.total} Issues</p>\n            <select name=\"language\" id=\"language-dropdown\" onChange={this.handleDrop}>\n              <option value=\"default\" default hidden>Language</option>\n              <option value=\"javascript\">Javascript</option>\n              <option value=\"python\">Python</option>\n              <option value=\"java\">Java</option>\n              <option value=\"html\">HTML</option>\n              <option value=\"css\">CSS</option>\n              <option value=\"ruby\">Ruby</option>\n              <option value=\"csharp\">C#</option>\n              <option value=\"php\">PHP</option>\n              <option value=\"cpp\">C++</option>\n            </select>\n          </div>\n          {this.state.loading === 1 ? <Loader/> : issues_list}\n        </div>\n      </div>\n    );\n  };\n};\n\nexport default Issues;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Issues from './Issues';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Issues />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}